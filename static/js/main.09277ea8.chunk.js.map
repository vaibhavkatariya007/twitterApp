{"version":3,"sources":["redux/reducers.js","redux/cofigureStore.js","containers/index.js","Root.js","serviceWorker.js","index.js","config.js","redux/modules/actions.js","redux/modules/constants.js","redux/modules/tweets.js","core/Footer.js","core/Loading.js","core/TweetCard.js","core/Header.js","core/index.js"],"names":["appReducer","combineReducers","tweets","tweetReducer","rootReducer","state","action","middlewares","thunk","configureStore","initialState","createStore","composeWithDevTools","applyMiddleware","Tweets","lazy","Root","store","fallback","exact","path","component","Boolean","window","location","hostname","match","__INITIAL_STATE__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","API","handleSearchTweetsError","err","type","handleMoreTweetsError","error","request","data","searchTweets","payload","query","dispatch","getState","url","fetch","response","json","console","log","message","catch","loadMoreTweets","nextPage","totalPages","count","Footer","Date","getFullYear","antIcon","style","fontSize","spin","Loading","className","indicator","TweetCard","src","user","profile_image_url_https","icon","name","screen_name","dayjs","created_at","format","text","entities","media","media_url_https","hashtags","map","hastag","Header","Layout","Search","Input","TwitterHeader","tweetsData","placeholder","onSearch","value","enterButton","notifications"],"mappings":"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","file":"static/js/main.09277ea8.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\r\n\r\nimport tweetReducer from './modules/tweets';\r\n\r\nconst appReducer = combineReducers({\r\n  tweets: tweetReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => appReducer(state, action);\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nlet middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst configureStore = initialState => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import {lazy} from 'react';\r\n\r\nconst Tweets = lazy(() => import('./Tweets'));\r\n\r\nexport {Tweets};\r\n","import React, {Suspense} from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport {Loading} from './core';\r\n\r\nimport {Tweets} from './containers';\r\n\r\nconst Root = ({store}) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<Loading />}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Tweets} />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/cofigureStore';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nconst persistedState = window.__INITIAL_STATE__;\nconst store = configureStore(persistedState);\n\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\nserviceWorker.unregister();\n","export const API = {BASE_URL: 'http://13.233.0.100:5001'};\r\n","import * as TYPES from './constants';\r\n\r\nexport const requestSearchTweets = () => ({\r\n  type: TYPES.REQUEST_SEARCH_TWEETS,\r\n});\r\n\r\nexport const handleSearchTweetsError = err => ({\r\n  type: TYPES.REQUEST_SEARCH_TWEETS_ERROR,\r\n  err,\r\n});\r\n\r\nexport const receiveSearchTweets = data => {\r\n  return {\r\n    type: TYPES.RECEIVE_SEARCH_TWEETS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const receiveMoreTweets = data => {\r\n  return {\r\n    type: TYPES.RECEIVE_MORE_TWEETS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const handleMoreTweetsError = err => ({\r\n  type: TYPES.REQUEST_MORE_TWEETS_ERROR,\r\n  err,\r\n});\r\n","export const RECEIVE_MORE_TWEETS = 'RECEIVE_MORE_TWEETS';\r\nexport const REQUEST_MORE_TWEETS_ERROR = 'REQUEST_MORE_TWEETS_ERROR';\r\nexport const REQUEST_SEARCH_TWEETS = 'REQUEST_SEARCH_TWEETS';\r\nexport const REQUEST_SEARCH_TWEETS_ERROR = 'REQUEST_SEARCH_TWEETS_ERROR';\r\nexport const RECEIVE_SEARCH_TWEETS = 'RECEIVE_SEARCH_TWEETS';\r\n","import * as TYPES from './constants';\r\nimport {API} from '../../config';\r\nimport {\r\n  requestSearchTweets,\r\n  receiveSearchTweets,\r\n  handleSearchTweetsError,\r\n  receiveMoreTweets,\r\n  handleMoreTweetsError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  error: null,\r\n  request: false,\r\n  data: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPES.REQUEST_SEARCH_TWEETS:\r\n      return {\r\n        ...state,\r\n        request: true,\r\n      };\r\n    case TYPES.RECEIVE_SEARCH_TWEETS:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        request: false,\r\n        error: false,\r\n      };\r\n    case TYPES.RECEIVE_MORE_TWEETS:\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          ...action.payload,\r\n          tweets: [...state.data.tweets, ...action.payload.tweets],\r\n        },\r\n        request: false,\r\n        error: false,\r\n      };\r\n    case TYPES.REQUEST_MORE_TWEETS_ERROR:\r\n    case TYPES.REQUEST_SEARCH_TWEETS_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        request: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const searchTweets = query => (dispatch, getState) => {\r\n  let url = API.BASE_URL;\r\n  url = `${url}/search?q=${query}`;\r\n  dispatch(requestSearchTweets());\r\n  try {\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response && response.message === 'successful') {\r\n          dispatch(receiveSearchTweets(response));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(handleSearchTweetsError(error));\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(handleSearchTweetsError(error));\r\n  }\r\n};\r\n\r\nexport const loadMoreTweets = (nextPage, totalPages, count) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  let url = API.BASE_URL;\r\n  url = `${url}/load-more-tweets?nextPage=${nextPage}&totalPages=${totalPages}&count=${count}`;\r\n  try {\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response && response.message === 'successful') {\r\n          dispatch(receiveMoreTweets(response));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(handleMoreTweetsError(error));\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(handleMoreTweetsError(error));\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst Footer = () => (\r\n  <Layout.Footer>\r\n    <span>&copy; Copyright {new Date().getFullYear()}</span>\r\n  </Layout.Footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {Spin, Icon} from 'antd';\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin />;\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading\">\r\n    <Spin indicator={antIcon} />\r\n    Loading....\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport dayjs from 'dayjs';\r\nimport {Avatar} from 'antd';\r\n\r\nconst TweetCard = ({data}) => {\r\n  return (\r\n    <div className=\"twitter-card\">\r\n      <div className=\"twitter-header\">\r\n        <div className=\"user-image\">\r\n          <Avatar src={data.user.profile_image_url_https} icon=\"user\" />\r\n        </div>\r\n        <div className=\"user-data\">\r\n          <span className=\"user-name\">{data.user.name}</span>\r\n          <span className=\"screen-name\">@{data.user.screen_name}</span>\r\n          <span className=\"tweet-created-on\">\r\n            - {dayjs(data.created_at).format('MMM,DD')}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"twitter-content\">\r\n        <div className=\"tweet\">{data.text}</div>\r\n        <div className=\"tweet-media\">\r\n          {data.entities.media &&\r\n            data.entities.media[0] &&\r\n            data.entities.media[0].type === 'photo' && (\r\n              <img src={data.entities.media[0].media_url_https} />\r\n            )}\r\n        </div>\r\n        <div className=\"tweet-hash-tags\">\r\n          {data.entities.hashtags.map(hastag => (\r\n            <span className=\"hash-tag\">#{hastag.text}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetCard;\r\n","import React from 'react';\r\nimport {Layout, Input, Icon, Badge} from 'antd';\r\n\r\nconst {Header} = Layout;\r\nconst {Search} = Input;\r\n\r\nconst TwitterHeader = ({searchTweets, tweetsData}) => (\r\n  <Header>\r\n    <Search\r\n      placeholder=\"Search Tweets\"\r\n      onSearch={value => {\r\n        if (value && value !== '') {\r\n          searchTweets(value);\r\n        }\r\n      }}\r\n      enterButton\r\n    />\r\n    <Badge count={tweetsData.data && tweetsData.data.notifications}>\r\n      <Icon type=\"bell\" />\r\n    </Badge>\r\n  </Header>\r\n);\r\nexport default TwitterHeader;\r\n","import Footer from './Footer';\r\nimport Loading from './Loading';\r\nimport TweetCard from './TweetCard';\r\nimport TwitterHeader from './Header';\r\n\r\nexport {TweetCard, TwitterHeader, Footer, Loading};\r\n"],"sourceRoot":""}